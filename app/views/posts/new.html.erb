<%= stylesheet_link_tag 'new', :media => "all" %>

<h1>新規投稿</h1>

<%= form_for @post do |f| %>
  <div class="new">
    <div class="image_form">
      <%= f.label :image, class: 'image_label' do %>
        <div class="prev-contents">
          <% if @post.image.present? %>
            <div class="prev-content">
              <%= image_tag @post.image.url, alt: "preview", class: "prev-image" %>
            </div>
          <% else %>
            <i class="fas fa-image"></i>
          <% end %>
        </div>
        <%= f.file_field :image, class: 'image_form_contents_field hidden_file' %>
      <% end %>
    </div>

    <p><%= f.label :投稿名 %>
    <%= f.text_field :name, :size => 30 %></p>

    <div class="field">
      <%= f.label :ジャンル  %>
      <%= f.select :genre, 
      [["観光スポット", "観光スポット"], 
      ["グルメ", "グルメ"]], include_blank: "選択して下さい" %>

      <p><%= f.label :投稿内容  %>
      <%= f.text_area :about, :size => "30x2" %></p>
      <%= f.label :lat,"緯度" %>
      <%= f.text_field :lat,:value =>"緯度", id: :lat %>
      <%= f.label :lng,"経度" %>
      <%= f.text_field :lng,:value =>"経度", id: :lng %>
      <p><%= f.submit "投稿する" %></p>
    </div>
  </div>
<% end %>

<div class="nmap">
 <h2>Map</h2>

  <input id="address" type="textbox" value="GeekSalon">
  <input type="button" value="検索" onclick="codeAddress()">
  <p>マーカーをドラック＆ドロップで位置の調整ができます。<p>
  <div id='map'></div>

  <style>
  #map {
  height: 600px;
  width: 600px;
  }
  </style>

  <script>
    //初期マップの設定
    let map
    let marker
    function initMap(){
    geocoder = new google.maps.Geocoder()

    map = new google.maps.Map(document.getElementById('map'), {
    center:  {lat: 35.6803997, lng:139.7690174},  //東京
    zoom: 15,   
    });
    }

    //検索後のマップ作成
    let geocoder
    let aft
    function codeAddress(){
      let inputAddress = document.getElementById('address').value;
      geocoder.geocode( { 'address': inputAddress}, function(results, status) {
        if (status == 'OK') {
          //マーカーが複数できないようにする
          if (aft == true){
            marker.setMap(null);
          }

          //新しくマーカーを作成する
          map.setCenter(results[0].geometry.location);
            marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location,
            draggable: true	// ドラッグ可能にする
          });

          //二度目以降か判断
          aft = true

          //検索した時に緯度経度を入力する
          document.getElementById('lat').value = results[0].geometry.location.lat();
          document.getElementById('lng').value = results[0].geometry.location.lng();

          // マーカーのドロップ（ドラッグ終了）時のイベント
          google.maps.event.addListener( marker, 'dragend', function(ev){
            // イベントの引数evの、プロパティ.latLngが緯度経度
            document.getElementById('lat').value = ev.latLng.lat();
            document.getElementById('lng').value = ev.latLng.lng();
          });
        } else {
          alert('該当する結果がありませんでした：' + status);
        }
      });   
    }
  </script>

  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDLsAxvKwJtKYkFd6UH6YhIlnqYG8pStIc&callback=initMap" async defer></script>

  <script>
    $(document).on('turbolinks:load', function () {
      $(function () {
        // 画像をプレビュー表示させる.prev-contentを作成
        function buildHTML(image) {
          var html =
            `
            <div class="prev-content">
              <img src="${image}", alt="preview" class="prev-image">
            </div>
            `
          return html;
        }

        // 画像が選択された時に発火します
        $(document).on('change', '.hidden_file', function () {
          // .file_filedからデータを取得して変数fileに代入します
          var file = this.files[0];
          // FileReaderオブジェクトを作成します
          var reader = new FileReader();
          // DataURIScheme文字列を取得します
          reader.readAsDataURL(file);
          // 読み込みが完了したら処理が実行されます
          reader.onload = function () {
            // 読み込んだファイルの内容を取得して変数imageに代入します
            var image = this.result;
            // プレビュー画像がなければ処理を実行します
            if ($('.prev-content').length == 0) {
              // 読み込んだ画像ファイルをbuildHTMLに渡します
              var html = buildHTML(image)
              // 作成した.prev-contentをiconの代わりに表示させます
              $('.prev-contents').prepend(html);
              // 画像が表示されるのでiconを隠します
              $('.photo-icon').hide();
            } else {
              // もし既に画像がプレビューされていれば画像データのみを入れ替えます
              $('.prev-content .prev-image').attr({ src: image });
            }
          }
        });
      });
    });
  </script>
</div>